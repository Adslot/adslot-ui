@import '../variable';
@import '../../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins/buttons';

@mixin button-disabled {
  background-color: $color-disabled;
  border-color: $color-disabled;
  color: $color-text-light;
}

@mixin reset-shadow-and-transform {
  box-shadow: none;
  transform: translateY(0);
}

@mixin button-inverse($color) {
  $transformed-color: hsl(hue($color), saturation($color), 90%);

  @include button-variant($color, $color-inverse, $color);

  &:active,
  &:focus,
  &:hover {
    &,
    &:active {
      background-color: $transformed-color;
    }
  }
}


// Use `.btn-inverse` and add a normal style like `info` to add colours.
.btn-inverse {
  // :not(:disabled) is used instead of :enabled as various elements (a, div, span)
  // are styled as buttons but do not have an :enabled state
  &:not(:disabled, [disabled='disabled']) {
    @include button-variant($color-text-light, $color-inverse, $color-border-light);

    &:hover,
    &:active,
    &:focus {
      background-color: $color-background-highlighted;
    }

    &.btn-primary {
      @include button-inverse($color-primary);
    }

    &.btn-success {
      @include button-inverse($color-positive);
    }

    &.btn-info {
      @include button-inverse($color-info);
    }

    &.btn-warning {
      @include button-inverse($color-warning);
    }

    &.btn-danger {
      @include button-inverse($color-negative);
    }
  }
}

.btn {
  box-shadow: 0 1px $color-border-light;
  margin-right: 5px;

  // Make border the same colour as the fill.
  &:not(.btn-inverse, .btn-borderless) {

    &,
    &:active,
    &:hover {
      border-color: transparent;
    }
  }

  &:last-child {
    margin-right: 0;
  }

  &:active {
    box-shadow: none;
    transform: translateY(1px);
  }

  &.disabled,
  &[disabled],
  [disabled] & {
    @include button-disabled;

    &:hover {
      @include button-disabled;
    }

    &,
    &:active {
      @include reset-shadow-and-transform;
    }
  }

  > .flexible-wrapper-inline {
    > .flexible-spacer-component {
      min-width: $padding-base-horizontal;
    }
  }
}

.btn-link {
  cursor: pointer;

  &,
  &:active {
    @include reset-shadow-and-transform;
  }

  &:disabled {
    background-color: transparent;
  }
}

.btn-borderless {
  &:not(:disabled) {
    @include button-variant($color-text-light, $color-inverse, $color-white);
    box-shadow: none;

    &:hover,
    &:focus {
      background-color: $color-white;
      border-color: $color-border-light;
      box-shadow: 0 1px $color-border-light;
    }
  }
}

.btn-flat {
  &:not(:disabled) {
    @include button-variant($color-text-light, $color-inverse, $color-white);
    border: 0;
    box-shadow: none;

    &:hover,
    &:focus {
      background-color: $color-white;
    }
  }
}

.btn-xs,
.btn-group-xs > .btn {
  font-size: $font-size-tiny;

  &:active {
    transform: translateY(0);
  }

  > .flexible-wrapper-inline {
    > .flexible-spacer-component {
      min-width: $padding-xs-horizontal;
    }
  }
}

.input-group-btn {
  > .btn {
    padding-bottom: $padding-base-vertical - 1px;
  }
}
