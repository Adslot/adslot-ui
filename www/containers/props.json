{
  "src/components/Accordion/index.jsx": [
    {
      "description": "",
      "displayName": "Accordion",
      "methods": [
        {
          "name": "onPanelClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "panelId",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "validateProps",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "renderPanelFromChildren",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "child",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "render `data-test-selector` onto the component. It can be useful for testing."
        },
        "onPanelClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "onPanelClick(panelId) takes in a single parameter which is the id of the clicked panel."
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "<span>\n Accept an array of <a href=\"/panel-example\">Panel</a> or\n <a href=\"/accordion-panel-example\">Accordion.Panel</a>\n </span>"
        },
        "defaultActivePanelIds": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "maxExpand": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "enum",
                "value": [
                  {
                    "value": "'max'",
                    "computed": false
                  }
                ]
              }
            ]
          },
          "required": false,
          "description": "Determine how many Panels can be expanded, accepted value is a positive number, or <code>max</code> to have no restriction",
          "defaultValue": {
            "value": "'max'",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/ActionPanel/index.jsx": [
    {
      "description": "",
      "displayName": "ActionPanel",
      "methods": [],
      "props": {
        "title": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'large'",
            "computed": false
          }
        },
        "onClose": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "actionButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "closeIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "<div className=\"close-icon\" />",
            "computed": false
          }
        },
        "isModal": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Alert/index.jsx": [
    {
      "description": "",
      "displayName": "Alert",
      "methods": [],
      "props": {
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'info'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'danger'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "['success', 'info', 'warning', 'danger']",
          "defaultValue": {
            "value": "'info'",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/AlertInput/index.jsx": [
    {
      "description": "",
      "displayName": "AlertInput",
      "methods": [
        {
          "name": "handleMouseEnter",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleMouseLeave",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleInputFocus",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleInputBlur",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "prefixAddon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "suffixAddon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "alertStatus": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'info'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "<span>\n  As <code>success</code> is assumed, and help is always displayed independently, the accepted pattern is to\n only use <code>warning</code> and <code>error</code> feedback states with this component. Otherwise leave\n type undefined for <code>success</code>.\n</span>",
          "defaultValue": {
            "value": "'success'",
            "computed": false
          }
        },
        "popoverPlacement": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "popoverPlacements"
          },
          "required": false,
          "description": "'left', 'top', 'top-start', 'top-end', 'bottom-start', 'bottom', 'bottom-end', 'right'",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          }
        },
        "alertMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "onValueChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onFocus": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Avatar/index.jsx": [
    {
      "description": "",
      "displayName": "Avatar",
      "methods": [],
      "props": {
        "color": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'blue'",
                "computed": false
              },
              {
                "value": "'green'",
                "computed": false
              },
              {
                "value": "'red'",
                "computed": false
              },
              {
                "value": "'orange'",
                "computed": false
              },
              {
                "value": "'cyan'",
                "computed": false
              },
              {
                "value": "'black'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "PropTypes.oneOf(['blue', 'green', 'red', 'orange', 'cyan', 'black'])"
        },
        "givenName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "tooltip": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "image": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "surname": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/BorderedWell/index.jsx": [
    {
      "description": "",
      "displayName": "BorderedWell",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Breadcrumb/index.jsx": [
    {
      "description": "",
      "displayName": "Breadcrumb",
      "methods": [],
      "props": {
        "rootNode": {
          "type": {
            "name": "custom",
            "raw": "BreadcrumbNode.propTypes.node"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "{ id: 'all', label: 'All' }",
            "computed": false
          }
        },
        "divider": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'>'",
            "computed": false
          }
        },
        "nodes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "node"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(newActiveId) => {\n  throw new Error(`Breadcrumb needs an onClick handler to take ${newActiveId}`);\n}",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Breadcrumb/Node/index.jsx": [
    {
      "description": "",
      "displayName": "BreadcrumbNode",
      "methods": [],
      "props": {
        "isLast": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": ""
        },
        "node": {
          "type": {
            "name": "shape",
            "value": {
              "id": {
                "name": "string",
                "required": true
              },
              "label": {
                "name": "string",
                "required": true
              }
            }
          },
          "required": false,
          "description": ""
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "src/components/Button/index.jsx": [
    {
      "description": "",
      "displayName": "Button",
      "methods": [],
      "props": {
        "theme": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'default'",
                "computed": false
              },
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'info'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'danger'",
                "computed": false
              },
              {
                "value": "'link'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'danger', 'link'])",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "target": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'_blank'",
                "computed": false
              },
              {
                "value": "'_self'",
                "computed": false
              },
              {
                "value": "'_parent'",
                "computed": false
              },
              {
                "value": "'_top'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "The target attribute specifies where to open the linked document when there is a defined 'href',\nPropTypes.oneOf(['_blank', '_self', '_parent', '_top'])",
          "defaultValue": {
            "value": "'_self'",
            "computed": false
          }
        },
        "inverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "PropTypes.oneOf(['small', 'large'])",
          "defaultValue": {
            "value": "'small'",
            "computed": false
          }
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'button'",
                "computed": false
              },
              {
                "value": "'reset'",
                "computed": false
              },
              {
                "value": "'submit'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "PropTypes.oneOf(['button', 'reset', 'submit'])",
          "defaultValue": {
            "value": "'button'",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/ButtonGroup/index.jsx": [
    {
      "description": "",
      "displayName": "ButtonGroup",
      "methods": [
        {
          "name": "injectProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "children",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "theme": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'info'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'danger'",
                "computed": false
              },
              {
                "value": "'link'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'danger', 'link'])"
        },
        "inverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "size": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Card/index.jsx": [
    {
      "description": "",
      "displayName": "CardContent",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "fill": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "stretch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "append": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    },
    {
      "description": "",
      "displayName": "Card",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "arrayOf Card.Content"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "accent": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Carousel/index.jsx": [
    {
      "description": "",
      "displayName": "CarouselComponent",
      "methods": [],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "autoplay": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "variableWidth": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "autoplaySpeed": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "10000",
            "computed": false
          }
        },
        "slidesToShow": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "2",
            "computed": false
          }
        },
        "dots": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Checkbox/index.jsx": [
    {
      "description": "",
      "displayName": "Checkbox",
      "methods": [],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "id for the checkbox input"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "name for the checkbox input"
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "checkBox label for the checkbox input"
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "checkBox input value"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector for the checkbox component",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if the checkbox is disabled",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function called when checkBox onChange event is fired",
          "defaultValue": {
            "value": "_.noop",
            "computed": true
          }
        },
        "inline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if checkbox-component-inline class is applied or not"
        },
        "checked": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "true",
                "computed": false
              },
              {
                "value": "false",
                "computed": false
              },
              {
                "value": "'partial'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "checked status of the input checkBox: oneOf([true, false, 'partial']",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "16",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/CheckboxGroup/index.jsx": [
    {
      "description": "",
      "displayName": "CheckboxGroup",
      "methods": [],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "id for the checkboxGroup input"
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "value": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ]
            }
          },
          "required": true,
          "description": "string array of checked values"
        },
        "children": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "node"
                }
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "checkBoxGroup children: oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "function called when checkBox onChange event is fired"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector for the checkboxGroup component"
        },
        "inline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if checkbox-component-inline class is applied or not"
        }
      }
    }
  ],
  "src/components/ConfirmModal/index.jsx": [
    {
      "description": "",
      "displayName": "ConfirmModalComponent",
      "methods": [],
      "props": {
        "buttonCancelLabel": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "determines the label of cancel button",
          "defaultValue": {
            "value": "'Cancel'",
            "computed": false
          }
        },
        "buttonConfirmLabel": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "determines the label of confirm button",
          "defaultValue": {
            "value": "'Confirm'",
            "computed": false
          }
        },
        "modalApply": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function called when modalApply event is fired",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi ConfirmModal needs a modalApply handler');\n}",
            "computed": false
          }
        },
        "modalClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function called when modalClose event is fired"
        },
        "modalDescription": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "description of the modal",
          "defaultValue": {
            "value": "'Are you sure?'",
            "computed": false
          }
        },
        "modalTitle": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "title of the modal",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "show": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if the modal needs to be shown or not",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/CountBadge/index.jsx": [
    {
      "description": "",
      "displayName": "CountBadge",
      "methods": [],
      "props": {
        "value": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "determines the number that is rendered inside the counter badge"
        },
        "status": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "determines the appearance of the counter badge: oneOf(['info', 'warning', 'danger', 'light'])",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector for the counter badge component"
        }
      }
    }
  ],
  "src/components/DatePicker/index.jsx": [
    {
      "description": "",
      "displayName": "DatePicker",
      "methods": [
        {
          "name": "handleDateChangeRaw",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "disableInlineEditing": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Empty/index.jsx": [
    {
      "description": "",
      "displayName": "Empty",
      "methods": [],
      "props": {
        "collection": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "node"
              },
              {
                "name": "array"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "text": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Nothing to show.'",
            "computed": false
          }
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/FilePicker/index.jsx": [
    {
      "description": "",
      "displayName": "FilePickerComponent",
      "methods": [
        {
          "name": "onChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "changeEvent",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "onUploadBtnClick",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "removeFile",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if the filePicker is disabled",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector of the filePicker"
        },
        "filter": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "determines what file types the user can pick from the file input dialog box"
        },
        "isHighlighted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if the filePicker is highlighted or not",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "the label to be displayed",
          "defaultValue": {
            "value": "'Select'",
            "computed": false
          }
        },
        "onRemove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function called when onRemove event is fired"
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "function called when onSelect event is fired"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "determines the placeholder when no date is selected",
          "defaultValue": {
            "value": "'No file selected'",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/FlexibleSpacer/index.jsx": [
    {
      "description": "",
      "displayName": "FlexibleSpacer",
      "methods": []
    }
  ],
  "src/components/FormGroup/index.jsx": [
    {
      "description": "",
      "displayName": "FormGroupComponent",
      "methods": [],
      "props": {
        "addon": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "helpText": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Grid/Cell/index.jsx": [
    {
      "description": "",
      "displayName": "GridCell",
      "methods": [],
      "props": {
        "addonClassNames": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "list of addOn classNames as array of strings",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "the children to be rendered"
        },
        "classSuffixes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector of the gridCell"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "function that will be called when gridCell is clicked"
        },
        "stretch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if gridCell should be stretched",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Grid/index.jsx": [
    {
      "description": "",
      "displayName": "Grid",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "the children to be rendered"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector of the grid"
        }
      }
    }
  ],
  "src/components/Grid/Row/index.jsx": [
    {
      "description": "",
      "displayName": "GridRow",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "the children to be rendered"
        },
        "horizontalBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if horizontalBorder is to be rendered",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "short": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if the row is short or long",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "type": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'body'",
                "computed": false
              },
              {
                "value": "'header'",
                "computed": false
              },
              {
                "value": "'subfooter'",
                "computed": false
              },
              {
                "value": "'footer'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "determines the type of griRow: oneOf(['body', 'header', 'subfooter', 'footer'])",
          "defaultValue": {
            "value": "'body'",
            "computed": false
          }
        },
        "verticalCellBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "determines if verticalCellBorder should be displayed",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "data-test-selector of the grid"
        }
      }
    }
  ],
  "src/components/HelpIconPopover/index.jsx": [
    {
      "description": "",
      "displayName": "HelpIconPopover",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "placement": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'left'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'right'",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/HoverDropdownMenu/index.jsx": [
    {
      "description": "",
      "displayName": "HoverDropdownMenu",
      "methods": [],
      "props": {
        "arrowPosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'left'",
                "computed": false
              },
              {
                "value": "'right'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Determine the placement of the popover",
          "defaultValue": {
            "value": "'left'",
            "computed": false
          }
        },
        "headerText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "If set to empty string, header will not be rendered.",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "hoverComponent": {
          "type": {
            "name": "element"
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/HoverDropdownMenu/PopoverLinkItem/index.jsx": [
    {
      "description": "",
      "displayName": "PopoverLinkItemComponent",
      "methods": [],
      "props": {
        "target": {
          "defaultValue": {
            "value": "'_self'",
            "computed": false
          },
          "required": false
        },
        "isEnabled": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "required": false
        },
        "onClick": {
          "defaultValue": {
            "value": "_.noop",
            "computed": true
          },
          "required": false
        }
      },
      "composes": [
        "lodash"
      ]
    }
  ],
  "src/components/ImageCropper/index.jsx": [
    {
      "description": "",
      "displayName": "ImageCropper",
      "methods": [],
      "props": {
        "title": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Image Upload'",
            "computed": false
          }
        },
        "src": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "alt": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "onCrop": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "onCancel": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "width": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "aspectRatio": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "isSaving": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/InformationBox/index.jsx": [
    {
      "description": "",
      "displayName": "InformationBox",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "theme": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'light'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "oneOf: 'primary', 'success', 'warning', 'error', 'light'",
          "defaultValue": {
            "value": "'light'",
            "computed": false
          }
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/ListPicker/index.jsx": [
    {
      "description": "",
      "displayName": "ListPickerComponent",
      "methods": [
        {
          "name": "getApplyButtonState",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "selectedItems",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "defaultState",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "selectItem",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "item",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "deselectItem",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "item",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "cancelAction",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "applyAction",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "allowEmptySelection": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "allowMultiSelection": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "emptyMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "emptySvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "initialSelection": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "itemProps"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "itemHeaders": {
          "type": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "toggle": {
                "name": "string",
                "required": false
              },
              "addon": {
                "name": "string",
                "required": false
              }
            }
          },
          "required": false,
          "description": ""
        },
        "itemInfo": {
          "type": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": true
              },
              "properties": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                },
                "required": true
              }
            }
          },
          "required": false,
          "description": ""
        },
        "items": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "itemProps"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "itemType": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'item'",
            "computed": false
          }
        },
        "labelFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "addonFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "linkButtons": {
          "type": {
            "name": "custom",
            "raw": "linkButtonsProps"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "modalApply": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi ListPicker needs a modalApply handler');\n}",
            "computed": false
          }
        },
        "modalDescription": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "modalClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'listpicker-component'",
            "computed": false
          }
        },
        "modalClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi ListPicker needs a modalClose handler');\n}",
            "computed": false
          }
        },
        "modalFootnote": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "modalTitle": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Select Items'",
            "computed": false
          }
        },
        "show": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/ListPickerPure/index.jsx": [
    {
      "description": "",
      "displayName": "ListPickerPureComponent",
      "methods": [
        {
          "name": "isItemSelected",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "item",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "item",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "updateSelectedItems",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "item",
              "type": null
            },
            {
              "name": "allowMultiSelection",
              "type": null
            },
            {
              "name": "isSelected",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "allowMultiSelection": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "deselectItem": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi ListPickerPure needs a deselectItem handler');\n}",
            "computed": false
          }
        },
        "emptyMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'No items to select.'",
            "computed": false
          }
        },
        "emptySvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "labelFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(item) => item.label",
            "computed": false
          }
        },
        "addonFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "itemHeaders": {
          "type": {
            "name": "shape",
            "value": {
              "label": {
                "name": "node",
                "required": false
              },
              "toggle": {
                "name": "string",
                "required": false
              },
              "addon": {
                "name": "string",
                "required": false
              }
            }
          },
          "required": false,
          "description": ""
        },
        "items": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "itemProps"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "itemType": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'item'",
            "computed": false
          }
        },
        "selectItem": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi ListPickerPure needs a selectItem handler');\n}",
            "computed": false
          }
        },
        "selectedItems": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "itemProps"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Navigation/index.jsx": [
    {
      "description": "",
      "displayName": "Navigation",
      "methods": [],
      "props": {
        "stacked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "NavItems are be positioned horizontally or vertically.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A callback fired when any children is selected.\ne.g. onSelect = {(eventKey) => console.log(eventKey)}\nwhere the eventKey is the unique key of each child."
        },
        "activeKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "A key for the current active item"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "barPosition": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              },
              {
                "value": "'none'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "define the position (styling) of the active item bar",
          "defaultValue": {
            "value": "'bottom'",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "render `data-test-selector` onto the component. It can be useful for testing."
        }
      }
    },
    {
      "description": "",
      "displayName": "NavItem",
      "methods": [],
      "props": {
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disable one menu item."
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "activeKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "eventKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "A key for each item, and can be used in onSelect"
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Define the href of the <a />"
        }
      }
    }
  ],
  "src/components/OverlayLoader/index.jsx": [
    {
      "description": "",
      "displayName": "OverlayLoader",
      "methods": [],
      "props": {
        "heading": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Loading'",
            "computed": false
          }
        },
        "text": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "top": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "320",
            "computed": false
          }
        },
        "disableBackground": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/PagedGrid/index.jsx": [
    {
      "description": "",
      "displayName": "PagedGridComponent",
      "methods": [],
      "props": {
        "columns": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "columnProps"
            }
          },
          "required": true,
          "description": ""
        },
        "emptyMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "emptySvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "items": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "itemProps"
            }
          },
          "required": true,
          "description": ""
        },
        "perPage": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": ""
        },
        "verticalCellBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/PageTitle/index.jsx": [
    {
      "description": "",
      "displayName": "PageTitle",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "isFooter": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Pagination/index.jsx": [
    {
      "description": "",
      "displayName": "Pagination",
      "methods": [],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "activePage": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The default active page, between 1 to the page count",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "pageCount": {
          "type": {
            "name": "number"
          },
          "required": true,
          "description": "The max page count"
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "A callback function for when clicking on previous, next and pagination items"
        },
        "prev": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "The Prev Button is displayed or not",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "next": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "The Next buton is displayed or not",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Panel/index.jsx": [
    {
      "description": "",
      "displayName": "PanelComponent",
      "methods": [
        {
          "name": "onHeaderClick",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "isCollapsed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Paragraph/index.jsx": [
    {
      "description": "",
      "displayName": "Paragraph",
      "methods": [],
      "props": {
        "briefWordCount": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The maximum of word count for brief content",
          "defaultValue": {
            "value": "255",
            "computed": false
          }
        },
        "content": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Content inside paragraph"
        },
        "className": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "Custom classnames"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Generate \"data-test-selector\" on the paragraph"
        },
        "isHtml": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Define if the content is HTML type or not",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Pill/index.jsx": [
    {
      "description": "",
      "displayName": "Pill",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Content inside pill"
        },
        "className": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "Custom classnames"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Custome onClick event"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Generate \"data-test-selector\" on the pill"
        }
      }
    }
  ],
  "src/components/Popover/index.jsx": [
    {
      "description": "",
      "displayName": "Popover",
      "methods": [],
      "props": {
        "theme": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "themes"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'light'",
            "computed": false
          }
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "popoverClassNames": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "arrowStyles": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "arrow css styles, mainly for positioning the arrow"
        },
        "wrapperStyles": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "modifiers": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "object"
                }
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "placement": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "popoverPlacements"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          }
        },
        "strategy": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "popoverStrategies"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'absolute'",
            "computed": false
          }
        },
        "popoverContent": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "node"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "triggers": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "custom",
                "raw": "triggerPropTypes"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "custom",
                  "raw": "triggerPropTypes"
                }
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'hover'",
            "computed": false
          }
        },
        "isOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "getContainer": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "popperRef": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Popover/Popper.jsx": [
    {
      "description": "",
      "displayName": "Popper",
      "methods": [],
      "props": {
        "arrowStyles": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "modifiers": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "object"
                }
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "placement": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "popoverPlacements"
          },
          "required": false,
          "description": ""
        },
        "strategy": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "popoverStrategies"
          },
          "required": false,
          "description": ""
        },
        "popoverClass": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "popoverContent": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "node"
              },
              {
                "name": "func"
              }
            ]
          },
          "required": true,
          "description": ""
        },
        "refElement": {
          "type": {
            "name": "instanceOf",
            "value": "Element"
          },
          "required": false,
          "description": ""
        },
        "boundariesElement": {
          "type": {
            "name": "instanceOf",
            "value": "Element"
          },
          "required": false,
          "description": ""
        },
        "title": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "wrapperStyles": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "popperRef": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/PrettyDiff/index.jsx": [
    {
      "description": "",
      "displayName": "PrettyDiff",
      "methods": [],
      "props": {
        "newText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "oldText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Radio/index.jsx": [
    {
      "description": "",
      "displayName": "RadioButton",
      "methods": [],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "_.noop",
            "computed": true
          }
        },
        "inline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/RadioGroup/index.jsx": [
    {
      "description": "",
      "displayName": "RadioGroup",
      "methods": [
        {
          "name": "onChangeDefault",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "renderChildren",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "node"
                }
              },
              {
                "name": "node"
              }
            ]
          },
          "required": true,
          "description": ""
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "inline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/RichTextEditor/FilePreviewList.jsx": [
    {
      "description": "",
      "displayName": "FilePreviewList",
      "methods": [],
      "props": {
        "files": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "onFileRemove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/RichTextEditor/FileSticker.jsx": [
    {
      "description": "",
      "displayName": "FileSticker",
      "methods": [],
      "props": {
        "file": {
          "type": {
            "name": "shape",
            "value": {
              "id": {
                "name": "string",
                "required": true
              },
              "name": {
                "name": "string",
                "required": true
              },
              "path": {
                "name": "string",
                "required": false
              },
              "isUploading": {
                "name": "bool",
                "required": false
              }
            }
          },
          "required": false,
          "description": ""
        },
        "onFileRemove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/RichTextEditor/FileUploadAction.jsx": [
    {
      "description": "",
      "displayName": "FileUploadAction",
      "methods": [],
      "props": {
        "onFileUpload": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "fileFilter": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/RichTextEditor/index.jsx": [
    {
      "description": "",
      "displayName": "RichTextEditor",
      "methods": [
        {
          "name": "stateToHTML",
          "docblock": null,
          "modifiers": [
            "static"
          ],
          "params": [
            {
              "name": "input",
              "optional": false,
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "stateFromHTML",
          "docblock": null,
          "modifiers": [
            "static"
          ],
          "params": [
            {
              "name": "input",
              "optional": false,
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "stateToPlainText",
          "docblock": null,
          "modifiers": [
            "static"
          ],
          "params": [
            {
              "name": "input",
              "optional": false,
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "stateToEntityList",
          "docblock": null,
          "modifiers": [
            "static"
          ],
          "params": [
            {
              "name": "input",
              "optional": false,
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Tell a story...'",
            "computed": false
          }
        },
        "initialValue": {
          "type": {
            "name": "instanceOf",
            "value": "EditorState"
          },
          "required": false,
          "description": "Editor State"
        },
        "value": {
          "type": {
            "name": "instanceOf",
            "value": "EditorState"
          },
          "required": false,
          "description": "Editor State: Instance of <a href=\"https://draftjs.org/docs/api-reference-editor-state\">draft-js editor state</a>"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "mentions": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "name": {
                  "name": "string",
                  "required": true
                },
                "title": {
                  "name": "string",
                  "required": false
                },
                "avatar": {
                  "name": "string",
                  "required": false
                }
              }
            }
          },
          "required": false,
          "description": ""
        },
        "onFileSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onFileRemove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "fileFilter": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'.jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.psd,.csv,.zip,.7z'",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/RichTextEditor/MentionAction.jsx": [
    {
      "description": "",
      "displayName": "MentionAction",
      "methods": [],
      "props": {
        "onToggle": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/RichTextEditor/MentionEntry.jsx": [
    {
      "description": "",
      "displayName": "MentionEntry",
      "methods": [],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "mention": {
          "type": {
            "name": "shape",
            "value": {
              "name": {
                "name": "string",
                "required": false
              },
              "title": {
                "name": "string",
                "required": false
              },
              "avatar": {
                "name": "string",
                "required": false
              }
            }
          },
          "required": false,
          "description": ""
        },
        "onMouseDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onMouseUp": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onMouseEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "isFocused": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/RichTextEditor/ToolbarButton.jsx": [
    {
      "description": "",
      "displayName": "ToolbarButton",
      "methods": [],
      "props": {
        "onToggle": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "label": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "active": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Search/index.jsx": [
    {
      "description": "",
      "displayName": "Search",
      "methods": [],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "debounceInterval": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Milliseconds",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Determine whether the text area is disabled",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Render `data-test-selector` onto the component. It can be useful for testing"
        },
        "icons": {
          "type": {
            "name": "shape",
            "value": {
              "search": {
                "name": "node",
                "required": false
              },
              "loader": {
                "name": "node",
                "required": false
              },
              "close": {
                "name": "node",
                "required": false
              }
            }
          },
          "required": false,
          "description": "{ search: React.Node, loader: React.Node, close: React.Node }",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onClear": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onSearch": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "Required"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "searchOnEnter": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Determines whether onSearch() will be fired on ENTER key press (Default behaviour is to fire onSearch() when the input changes)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "showSearchButton": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Determines whether displaying the search button or not",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/SearchableCheckList/index.jsx": [
    {
      "description": "",
      "displayName": "SearchableCheckList",
      "methods": [],
      "props": {
        "context": {
          "type": {
            "name": "shape",
            "value": {
              "singularLabel": {
                "name": "string",
                "required": true
              },
              "pluralLabel": {
                "name": "string",
                "required": true
              }
            }
          },
          "required": true,
          "description": "Context of the list displayed: {singularLabel: PropTypes.string, pluralLabel: PropTypes.string}"
        },
        "items": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "value": {
                  "name": "string",
                  "required": true
                },
                "label": {
                  "name": "string",
                  "required": true
                }
              }
            }
          },
          "required": false,
          "description": "List of items: { value: PropTypes.string, label: PropTypes.string }"
        },
        "selectedItemsKeys": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "List of checked items value",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Search placeholder",
          "defaultValue": {
            "value": "'Search'",
            "computed": false
          }
        },
        "displayCount": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Number of checkbox items to render",
          "defaultValue": {
            "value": "6",
            "computed": false
          }
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "src/components/Select/index.jsx": [
    {
      "description": "",
      "displayName": "DropdownIndicator",
      "methods": []
    },
    {
      "description": "",
      "displayName": "ClearIndicator",
      "methods": []
    }
  ],
  "src/components/Skeleton/index.jsx": [
    {
      "description": "",
      "displayName": "Skeleton",
      "methods": [],
      "props": {
        "animated": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "className": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "string"
                }
              }
            ]
          },
          "required": false,
          "description": "Custom classnames"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Generate \"data-test-selector\""
        },
        "height": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "variant": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'rect'",
                "computed": false
              },
              {
                "value": "'circle'",
                "computed": false
              },
              {
                "value": "'text'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "oneOf: 'rect', 'circle', 'text'",
          "defaultValue": {
            "value": "'text'",
            "computed": false
          }
        },
        "width": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Slicey/Arc/index.jsx": [
    {
      "description": "",
      "displayName": "Arc",
      "methods": [],
      "props": {
        "data": {
          "type": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": true
              },
              "id": {
                "name": "number",
                "required": true
              },
              "largeArcFlag": {
                "name": "number",
                "required": true
              },
              "x1": {
                "name": "number",
                "required": true
              },
              "y1": {
                "name": "number",
                "required": true
              },
              "x2": {
                "name": "number",
                "required": true
              },
              "y2": {
                "name": "number",
                "required": true
              }
            }
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Slicey/Donut/index.jsx": [
    {
      "description": "",
      "displayName": "Donut",
      "methods": []
    }
  ],
  "src/components/Slicey/index.jsx": [
    {
      "description": "",
      "displayName": "getArcElements",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Slicey",
      "methods": [],
      "props": {
        "dataset": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "label": {
                  "name": "string",
                  "required": true
                },
                "value": {
                  "name": "number",
                  "required": true
                }
              }
            }
          },
          "required": false,
          "description": "Slicey will represent all values as percentage of the pie based on the sum of all values.\nLabel will provide a className to each slice as <code>.arc-component-{'${label}'}</code>."
        },
        "diameter": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "100",
            "computed": false
          }
        },
        "donut": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Add a line across the radius at a set fraction of the whole e.g. .25 for ¼."
        },
        "marker": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Set to true if you wish the pie chart to have a hollow hole in the centre, like a donut :9"
        }
      }
    }
  ],
  "src/components/Slicey/Marker/index.jsx": [
    {
      "description": "",
      "displayName": "Marker",
      "methods": [],
      "props": {
        "fraction": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Spinner/index.jsx": [
    {
      "description": "",
      "displayName": "Spinner",
      "methods": [],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "size": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'small'",
                "computed": false
              },
              {
                "value": "'medium'",
                "computed": false
              },
              {
                "value": "'large'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Size of the spinner should be one of: 'large' (40x40px), 'medium' (30x30px), 'small' (16x16px)",
          "defaultValue": {
            "value": "'large'",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/SplitPane/index.jsx": [
    {
      "description": "",
      "displayName": "SplitPaneComponent",
      "methods": [],
      "props": {
        "additionalClassNames": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "render `data-test-selector` onto the component. It can be useful for testing."
        }
      }
    }
  ],
  "src/components/Statistic/index.jsx": [
    {
      "description": "",
      "displayName": "Statistic",
      "methods": [],
      "props": {
        "inline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Horizontal layout as opposed to stacked.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "Preferred TitleCase (aka. PascalCase, StartCase)"
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "Where value is a number consider human readable strings e.g 'Million' instead of 000,000."
        }
      }
    }
  ],
  "src/components/StatusPill/index.jsx": [
    {
      "description": "",
      "displayName": "StatusPill",
      "methods": [],
      "props": {
        "status": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "Text inside status pill"
        },
        "displayStyle": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "'primary'",
                "computed": false
              },
              {
                "value": "'success'",
                "computed": false
              },
              {
                "value": "'warning'",
                "computed": false
              },
              {
                "value": "'error'",
                "computed": false
              },
              {
                "value": "'light'",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "one of [\"primary\", \"success\", \"warning\", \"error\", \"light\"]",
          "defaultValue": {
            "value": "styles[0]",
            "computed": true
          }
        },
        "inverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Status pill with inverse style",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Generate \"data-test-selector\" on the status pill"
        }
      }
    }
  ],
  "src/components/SvgSymbol/index.jsx": [
    {
      "description": "",
      "displayName": "SvgSymbol",
      "methods": [],
      "props": {
        "classSuffixes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "href": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "accept both file path and base64 encoded string",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "isCircle": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Switch/index.jsx": [
    {
      "description": "",
      "displayName": "Switch",
      "methods": [
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "defaultChecked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "switch value, if the value is un-controlled"
        },
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "switch value, if the value is controlled"
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "This function is called when value is changed\n <br/>\n const onChange = (nextState) => ..."
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'switch-component'",
            "computed": false
          }
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Tab/index.jsx": [
    {
      "description": "",
      "displayName": "Tab",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "eventKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": true,
          "description": "string or number"
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "tabClassName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "show": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Tabs/index.jsx": [
    {
      "description": "",
      "displayName": "Tabs",
      "methods": [
        {
          "name": "isControlled",
          "docblock": null,
          "modifiers": [
            "get"
          ],
          "params": [],
          "returns": null
        },
        {
          "name": "activeKey",
          "docblock": null,
          "modifiers": [
            "get"
          ],
          "params": [],
          "returns": null
        },
        {
          "name": "switchTab",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "key",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "defaultActiveKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "string or number"
        },
        "activeKey": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "string or number"
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "(selectedTabKey) => {...}"
        }
      }
    }
  ],
  "src/components/Tag/index.jsx": [
    {
      "description": "",
      "displayName": "ActionButton",
      "methods": [],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "onAction": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "actionIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    },
    {
      "description": "",
      "displayName": "Tag",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "accent": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "baseClass": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'tag-component'",
            "computed": false
          }
        },
        "inverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "onAction": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "actionIcon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/Textarea/index.jsx": [
    {
      "description": "",
      "displayName": "Textarea",
      "methods": [
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "maxLength": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "statusClass": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/TextEllipsis/index.jsx": [
    {
      "description": "",
      "displayName": "TextEllipsisComponent",
      "methods": [
        {
          "name": "setTruncate",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "popoverProps": {
          "type": {
            "name": "shape",
            "value": "_.pick(Popover.propTypes, ['placement', 'trigger'])",
            "computed": true
          },
          "required": false,
          "description": "Can use `placement` and `trigger` props from <a href=\"/popover\">Popover</a> to control popover.",
          "defaultValue": {
            "value": "{\n  placement: 'top',\n  trigger: 'hover',\n}",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Tile/index.jsx": [
    {
      "description": "",
      "displayName": "Tile",
      "methods": [],
      "props": {
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Custom classnames"
        },
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Tile title"
        },
        "imgLink": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Use Logo as a tile"
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Custome onClick event"
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Generate \"data-test-selector\" on the pill"
        }
      }
    }
  ],
  "src/components/TileGrid/index.jsx": [
    {
      "description": "",
      "displayName": "TileGrid",
      "methods": [],
      "props": {
        "title": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "items": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "id": {
                  "name": "union",
                  "value": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "number"
                    }
                  ],
                  "required": true
                },
                "classSuffix": {
                  "name": "string",
                  "required": true
                },
                "title": {
                  "name": "node",
                  "required": true
                },
                "imgLink": {
                  "name": "string",
                  "required": false
                },
                "width": {
                  "name": "number",
                  "required": false
                },
                "maxWidth": {
                  "name": "number",
                  "required": false
                },
                "imgAlign": {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'left'",
                      "computed": false
                    },
                    {
                      "value": "'right'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    }
                  ],
                  "required": false
                }
              }
            }
          },
          "required": true,
          "description": "The shape of item object is defined below"
        },
        "onItemClick": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "distributed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If distributed is true, each tile in this component will have a distributed width.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Toast/ToastContainer.jsx": [
    {
      "description": "",
      "displayName": "ToastContainerComponent",
      "methods": [],
      "props": {
        "position": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "toastPlacements"
          },
          "required": false,
          "description": "PropTypes.oneOf(['top-right', 'top-center', 'top-left', 'bottom-right', 'bottom-center', 'bottom-left'])",
          "defaultValue": {
            "value": "'bottom-left'",
            "computed": false
          }
        },
        "autoClose": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "5000",
            "computed": false
          }
        },
        "hideProgressBar": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "newestOnTop": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "closeOnClick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "rtl": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "draggable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "pauseOnHover": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Toast/ToastNotification.jsx": [
    {
      "description": "",
      "displayName": "ToastMessage",
      "methods": []
    }
  ],
  "src/components/Totals/index.jsx": [
    {
      "description": "",
      "displayName": "Totals",
      "methods": [],
      "props": {
        "toSum": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "shape",
              "value": {
                "label": {
                  "name": "node",
                  "required": false
                },
                "value": {
                  "name": "number",
                  "required": true
                },
                "isHidden": {
                  "name": "bool",
                  "required": false
                }
              }
            }
          },
          "required": false,
          "description": "{ label: PropTypes.node, value: PropTypes.number.isRequired, isHidden: PropTypes.bool }",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "valueFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(value) => `${value}`",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/TreePicker/Grid/index.jsx": [
    {
      "description": "",
      "displayName": "TreePickerGridComponent",
      "methods": [],
      "props": {
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "emptySvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "emptyText": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "expandNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "groupFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => 'Default Group'",
            "computed": false
          }
        },
        "hideIcon": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "includeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "itemType": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "nodes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "node"
            }
          },
          "required": false,
          "description": ""
        },
        "nodeRenderer": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "removeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": ""
        },
        "valueFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "displayGroupHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/TreePicker/index.jsx": [
    {
      "description": "",
      "displayName": "TreePickerSimplePureComponent",
      "methods": [],
      "props": {
        "additionalClassNames": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "string"
            }
          },
          "required": false,
          "description": "Class Names for SplitPane component"
        },
        "breadcrumbRootNode": {
          "type": {
            "name": "custom",
            "raw": "TreePickerPropTypes.breadCrumbNode"
          },
          "required": false,
          "description": "Optional. This prop allows customization of the Breadcrumb root node. { id: PropTypes.sting | PropTypes.number, label: PropTypes.string}"
        },
        "breadcrumbNodes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "TreePickerPropTypes.breadCrumbNode.isRequired"
            }
          },
          "required": false,
          "description": "Returns node id. This prop is not required, but an empty array is not allowed. At least one element is required in the array."
        },
        "breadcrumbOnClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "This propType creates a list of breadcrumb node"
        },
        "debounceInterval": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Interval time on search",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disables treepicker including search bar",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disableInclude": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Disables treepicker's grid item"
        },
        "emptySvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The svg symbol used when there will be no item on both left or right Grid"
        },
        "emptySelectedListSvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "The svg symbol used when there will be no item on right Grid (Selected list)"
        },
        "emptyText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Displays this text when there will be no item on left Grid. Prefer type 'string', but rich text can be used here"
        },
        "emptySelectedListText": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Displays this text when there will be no item on right Grid(Selected list). Prefer type 'string', but rich text can be used here."
        },
        "expandNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Triggers when clicking any item in the left Grid"
        },
        "groupFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "This function use to transform keys of the list item in the left Grid"
        },
        "hideIcon": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Hides the empty icon on right Grid (Selected list). Given emptySvgSymbol and hideIcon together, the empty symbol will be only displayed on the left grid."
        },
        "includeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Click event on '+' button of each list Item"
        },
        "initialStateNode": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Same as emptyText"
        },
        "initialStateSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Same as emptySymbol"
        },
        "itemType": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Uses for specific className",
          "defaultValue": {
            "value": "'node'",
            "computed": false
          }
        },
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "nodeRenderer": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Uses for rendering custom node"
        },
        "removeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Triggers when search input changes"
        },
        "onClear": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Triggers when the user clicks the clear button on search input"
        },
        "onSearch": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Please see <a href='/search'>Search</a>"
        },
        "searchOnEnter": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Please see <a href='/search'>Search</a>",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "searchPlaceholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Search'",
            "computed": false
          }
        },
        "searchValue": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "selectedNodes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "node"
            }
          },
          "required": true,
          "description": ""
        },
        "showSearch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Show or hide the search field on the selection pane",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "subtree": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "node"
            }
          },
          "required": false,
          "description": "A list of available unselected nodes. This prop is not required, but an empty array is not allowed. At least one element is required in the array."
        },
        "svgSymbolCancel": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "svgSymbolSearch": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "displayGroupHeader": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "e.g: Default Group",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "hideSearchOnRoot": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "selectedTopSearch": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "A react node to be rendered at the top of the right hand side pane. Generally we are expecting a search component."
        }
      }
    }
  ],
  "src/components/TreePicker/Nav/index.jsx": [
    {
      "description": "",
      "displayName": "TreePickerNavComponent",
      "methods": [],
      "props": {
        "breadcrumbRootNode": {
          "type": {
            "name": "custom",
            "raw": "TreePickerPropTypes.breadCrumbNode"
          },
          "required": false,
          "description": ""
        },
        "breadcrumbNodes": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "TreePickerPropTypes.breadCrumbNode"
            }
          },
          "required": false,
          "description": ""
        },
        "breadcrumbOnClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onClear": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onSearch": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "_.noop",
            "computed": true
          }
        },
        "debounceInterval": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "searchOnEnter": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "searchPlaceholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "searchValue": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "showSearch": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "svgSymbolCancel": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "svgSymbolSearch": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/components/TreePicker/Node/Expander/index.jsx": [
    {
      "description": "",
      "displayName": "TreePickerNodeExpander",
      "methods": [],
      "props": {
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "src/components/TreePicker/Node/index.jsx": [
    {
      "description": "",
      "displayName": "TreePickerNodeComponent",
      "methods": [
        {
          "name": "setLoadingAndExpandNode",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleRemove",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleInclude",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "expandNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "includeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(node) => {\n  throw new Error(`AdslotUi TreePickerNode needs an includeNode handler for ${node}`);\n}",
            "computed": false
          }
        },
        "itemType": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "node": {
          "type": {
            "name": "custom",
            "raw": "TreePickerPropTypes.node.isRequired"
          },
          "required": false,
          "description": ""
        },
        "nodeRenderer": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(node) => node.label",
            "computed": false
          }
        },
        "removeNode": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(node) => {\n  throw new Error(`AdslotUi TreePickerNode needs a removeNode handler for ${node}`);\n}",
            "computed": false
          }
        },
        "selected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "valueFormatter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "(value) => value",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/UserListPicker/index.jsx": [
    {
      "description": "",
      "displayName": "UserListPickerComponent",
      "methods": [],
      "props": {
        "allowEmptySelection": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "avatarColor": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "avatarColor({ avatar, givenName, id, surname })",
          "defaultValue": {
            "value": "_.noop",
            "computed": true
          }
        },
        "emptyIcon": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "emptyMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'No users.'",
            "computed": false
          }
        },
        "emptySvgSymbol": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "initialSelection": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "userType"
            }
          },
          "required": false,
          "description": "Array of { avatar: PropTypes.string, givenName: PropTypes.string, surname: PropTypes.string, id: PropTypes.number }",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "modalApply": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi UserListPicker needs a modalApply handler');\n}",
            "computed": false
          }
        },
        "modalDescription": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Select users.'",
            "computed": false
          }
        },
        "modalClose": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "() => {\n  throw new Error('AdslotUi UserListPicker needs a modalClose handler');\n}",
            "computed": false
          }
        },
        "modalTitle": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Select Users'",
            "computed": false
          }
        },
        "show": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "userHeaders": {
          "type": {
            "name": "shape",
            "value": {
              "label": {
                "name": "string",
                "required": false
              },
              "toggle": {
                "name": "string",
                "required": false
              }
            }
          },
          "required": false,
          "description": "Shape of { label: PropTypes.string, toggle: PropTypes.string }",
          "defaultValue": {
            "value": "{ label: 'Team', toggle: 'Member' }",
            "computed": false
          }
        },
        "users": {
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "custom",
              "raw": "userType"
            }
          },
          "required": false,
          "description": "Array of { avatar: PropTypes.string, givenName: PropTypes.string, surname: PropTypes.string, id: PropTypes.number }",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/VerticalNavigation/index.jsx": [
    {
      "description": "",
      "displayName": "VerticalNavigation",
      "methods": [
        {
          "name": "getActiveTabIndex",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "children",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "renderContent",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "{ children }",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "renderMenu",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "{ children, isCollapsed }",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "collapsable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "control whether the MenuItem can be folded into a collapse icon (hamburger)",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "isCollapsed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "event handler for clicking on the collapse/expand button\n</br>\nconst onClick = () => ..."
        },
        "dts": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "render `data-test-selector` onto the component. It can be useful for testing."
        },
        "className": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ]
}