#!/usr/bin/env node
// Based on https://github.com/eslint/eslint/blob/master/Makefile.js
require("shelljs/make");

var semver = require("semver");

'use strict';

// Greenkeeper commit style ('chore(package)') should be allowed until commit templates are supported.
var TAG_REGEX = /^(?:Fix|Update|Breaking|Docs|Build|New|Upgrade|chore\(package\)):/;

/**
 * Executes a command and returns the output instead of printing it to stdout.
 * @param {string} cmd The command string to execute.
 * @returns {string} The result of the executed command.
 */
function execSilent(cmd) {
    return exec(cmd, { silent: true }).output;
}

/**
 * Splits a command result to separate lines.
 * @param {string} result The command result string.
 * @returns {array} The separated lines.
 */
function splitCommandResultToLines(result) {
    return result.trim().split("\n");
}

function checkGitCommit() {
  var commitMsgs, failed;

  echo("Validating commit messageâ€¦");

  commitMsgs = [execSilent("git log -1 --format=format:%s --no-merges")];

  // No commit since master should not cause test to fail
  if (commitMsgs[0] === "") {
    return;
  }

  // Check for more than one commit
  if (commitMsgs.length > 1) {
    echo(" - More than one commit found, please squash.");
    failed = true;
  }

  // Only check non-release messages
  if (!semver.valid(commitMsgs[0]) && !/^Revert /.test(commitMsgs[0])) {
    if (commitMsgs[0].slice(0, commitMsgs[0].indexOf("\n")).length > 72) {
      echo(" - First line of commit message must not exceed 72 characters");
      failed = true;
    }

    // Check for tag at start of message
    if (!TAG_REGEX.test(commitMsgs[0])) {
      echo([" - Commit summary must start with one of:",
        "    'Fix:'",
        "    'Update:'",
        "    'Breaking:'",
        "    'Docs:'",
        "    'Build:'",
        "    'New:'",
        "    'Upgrade:'",
        "   Please refer to the contribution guidelines for more details."].join("\n"));
      failed = true;
    }
  }

  if (failed) {
    exit(1);
  }
}

checkGitCommit();
